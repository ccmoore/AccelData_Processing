styler:::style_active_file()
styler:::style_active_file()
intensity_week_summary <- function(acceldata_PAI) {
temp_data <- markPAI(data = acceldata_PAI, cts = "axis1", markingString = "w",
breaks = c(-Inf, 100, 760, 2020, Inf),
labels = c("sedentary", "light", "moderate", "vigorous"))
pai_byday <<- temp_data %>%
filter(wearing == "w") %>%
group_by(weekday, pai) %>%
summarise(minutes = n())
pai_byweekday_end <<- temp_data %>%
filter(wearing == "w") %>%
mutate(week_day_end = ifelse(weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")) %>%
group_by(week_day_end, pai) %>%
summarise(minutes= n()/n_distinct(weekday))
pai_weekavg <<- pai_byday %>%
group_by(pai) %>%
summarise(minutes = sum(minutes)/n_distinct(weekday))
return(c(pai_byday, pai_byweekday_end, pai_weekavg))
}
pai_week_summary <- function(acceldata_PAI) {
temp_data <- markPAI(data = acceldata_PAI, cts = "axis1", markingString = "w",
breaks = c(-Inf, 100, 760, 2020, Inf),
labels = c("sedentary", "light", "moderate", "vigorous"))
pai_byday <<- temp_data %>%
filter(wearing == "w") %>%
group_by(weekday, pai) %>%
summarise(minutes = n())
pai_byweekday_end <<- temp_data %>%
filter(wearing == "w") %>%
mutate(week_day_end = ifelse(weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")) %>%
group_by(week_day_end, pai) %>%
summarise(minutes= n()/n_distinct(weekday))
pai_weekavg <<- pai_byday %>%
group_by(pai) %>%
summarise(minutes = sum(minutes)/n_distinct(weekday))
return(c(pai_byday, pai_byweekday_end, pai_weekavg))
}
pai_week_summary(import_data)
pai_week_summary <- function(acceldata_PAI) {
temp_data <- markPAI(data = acceldata_PAI, cts = "axis1", markingString = "w",
breaks = c(-Inf, 100, 760, 2020, Inf),
labels = c("sedentary", "light", "moderate", "vigorous"))
pai_byday <<- temp_data %>%
filter(wearing == "w") %>%
group_by(weekday, pai) %>%
summarise(minutes = n())
pai_byweekday_end <<- temp_data %>%
filter(wearing == "w") %>%
mutate(week_day_end = ifelse(weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")) %>%
group_by(week_day_end, pai) %>%
summarise(minutes= n()/n_distinct(weekday))
pai_weekavg <<- pai_byday %>%
group_by(pai) %>%
summarise(minutes = sum(minutes)/n_distinct(weekday))
}
pai_week_summary(import_data)
View(pai_byday)
View(pai_byweekday_end)
plot_weekDay_vs_End <- function(pai_weekdayend, steps_weekdayend, subject) {
ggplot(pai_weekdayend, aes(x = wee_day_end, y = minutes, fill = pai)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
}
plot_weekday_vs_end(steps_byweekday_end, pai_byweekday_end, "CM")
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
ggplot(pai_weekdayend, aes(x = wee_day_end, y = minutes, fill = pai)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
}
plot_weekday_vs_end(steps_byweekday_end, pai_byweekday_end, "CM")
View(steps_byweekday_end)
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
}
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
#'  steps/day physical activity intensities for weekdays vs the weekend
#'
#'  @param subject unique subject identifier
#'
#' @return Two bar plot, one with weekday vs weekend average minutes/day at
#' physical activity intensites and the other with weekday vs weekend average
#' minutes/day
#' @export
#'
#' @examples plot_weekDay_vs_End(pai_summary, steps_summary, "S1")
pai_weekdayend <- pai_byweekday_end
View(pai_weekdayend)
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
}
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
#'  steps/day physical activity intensities for weekdays vs the weekend
#'
#'  @param subject unique subject identifier
#'
#' @return Two bar plot, one with weekday vs weekend average minutes/day at
#' physical activity intensites and the other with weekday vs weekend average
#' minutes/day
#' @export
#'
#' @examples plot_weekDay_vs_End(pai_summary, steps_summary, "S1")
pai_weekdayend <- pai_byweekday_end
subject <- "CM"
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
class(pai_weekdayend$minutes)
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity") +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar() +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
}
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
}
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
pai <- ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
pai
steps<- ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
pai <- ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
pai
steps<- ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
steps
}
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
pai <- ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
steps<- ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
return(c(steps,pai))
}
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
#' Plot steps vs time (minute)
#'
#' @param pa_data dataframe with one minute epoch dat
#'
#' @return a line graph of steps for each minute over the study period, with blue horizontal lines for each 24hrs
#' @export
#'
#' @examples plot_steps(my_data)
plot_steps <- function(pa_data){
pa_data$study_min <- as.numeric(row.names(pa_data))
ggplot(data = pa_data)+
geom_line(aes(x = study_min, y = steps))+
geom_vline(aes(xintercept=1440), linetype="dashed",colour="blue",size=0.7)+
geom_vline(aes(xintercept=2880), linetype="dashed",colour="blue",size=0.7)+
geom_vline(aes(xintercept=4320), linetype="dashed",colour="blue",size=0.7)+
ylab("Steps")+
xlab("Time (minutes)")+
theme_bw()+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
}
plot_steps(import_data)
?plot_steps
plot_steps(import_data)
plot_steps(import_data)
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
pai <- ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
pai
steps<- ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
steps
}
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
pai <- ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
pai
steps<- ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
steps
return(c(steps,pai))
}
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_weekday_vs_end <- function(pai_weekdayend, steps_weekdayend, subject) {
plot_pai_dayend <<- ggplot(pai_weekdayend, aes(x = week_day_end, y = minutes, fill = pai)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Minutes/Day") +
ggtitle(subject) +
theme_bw()
plot_steps_dayend <<- ggplot(steps_weekdayend, aes(x = week_day_end, y = steps)) +
geom_bar(stat="identity", position = position_dodge()) +
xlab("Weekday Classification") +
ylab("Average Steps/Day") +
ggtitle(subject) +
theme_bw()
}
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_pai_dayend
plot_steps_dayend
# 1) Update function documentation
document("./Accelerometer")
library(devtools)
library(roxygen2)
# 1) Update function documentation
document("./Accelerometer")
# 2) Rebuild package
build("./Accelerometer")
library(tidyverse)
library(RSQLite)
library(PhysicalActivity)
load_all("./Accelerometer")
?acceldata_prep
?acceldata_prep
acceldata_prep(input_dir = "./Data", file_pattern = "*1secAGdata.csv",
output_dir = "./Outputs", subjectID_length = 2,
subjectID_start = 1)
?sleep_filter
sleep_filter(acceldata_dir = "./Outputs", sleeplog_dir = "./Data",
output_dir = "./Outputs", subjectID_length = 2,
accelfile_pattern = "^PrepedData", sleeplog_pattern = "*SleepLog",
accelfile_IDstart = 12, sleeplog_IDstart = 1)
acceldata_dir <- acceldata_dir
acceldata_dir <- "./Outputs"
accelfile_pattern = "^PrepedData"
accel_files <- list.files(acceldata_dir, pattern = accelfile_pattern)
# Error if subject with an accel file does not have a sleep log
subjects_accel_files <- substr(accel_files, start = accelfile_IDstart,
stop = (accelfile_IDstart+subjectID_length-1))
sleeplog_dir = "./Data"
output_dir = "./Outputs"
subjectID_length = 2
sleeplog_pattern = "*SleepLog"
accelfile_IDstart = 12
sleeplog_IDstart = 1
sleeplog_files <- list.files(sleeplog_dir, pattern = sleeplog_pattern)
# Error if subject with an accel file does not have a sleep log
subjects_accel_files <- substr(accel_files, start = accelfile_IDstart,
stop = (accelfile_IDstart+subjectID_length-1))
subjects_sleep_files <- substr(sleeplog_files, start = sleeplog_IDstart,
stop = (sleeplog_IDstart+subjectID_length-1))
if(any(!subjects_accel_files %in% subjects_sleep_files)) {
stop(paste("No sleep log for Subject",
subjects_accel_files[which(!subjects_accel_files %in% subjects_sleep_files)]),
call. = FALSE)
}
library(tidyverse)
library(RSQLite)
library(PhysicalActivity)
load_all("./Accelerometer")
load_all("./Accelerometer")
library(devtools)
library(roxygen2)
# 1) Update function documentation
document("./Accelerometer")
# 2) Rebuild package
build("./Accelerometer")
### Test Functions ###
load_all("./Accelerometer")
library(tidyverse)
library(RSQLite)
library(PhysicalActivity)
load_all("./Accelerometer")
document("./Accelerometer")
# 2) Rebuild package
build("./Accelerometer")
### Test Functions ###
load_all("./Accelerometer")
document("./Accelerometer")
# 2) Rebuild package
build("./Accelerometer")
load_all("./Accelerometer")
?acceldata_prep
acceldata_prep(input_dir = "./Data", file_pattern = "*1secAGdata.csv",
output_dir = "./Outputs", subjectID_length = 2,
subjectID_start = 1)
?sleep_filter
sleep_filter(acceldata_dir = "./Outputs", sleeplog_dir = "./Data",
output_dir = "./Outputs", subjectID_length = 2,
accelfile_pattern = "^PrepedData", sleeplog_pattern = "*SleepLog",
accelfile_IDstart = 12, sleeplog_IDstart = 1)
import_data <- read.csv("./Outputs/FilteredWakeData_CM.csv")
?pai_week_summary
pai_week_summary(import_data)
pai_week_summary(import_data)
pai_byday
?pai_week_summary
pai_week_summary(import_data)
pai_byday
pai_weekavg
pai_byweekday_end
pai_week_summary(import_data)
pai_byday
pai_weekavg
pai_byweekday_end
steps_week_summary(import_data)
steps_byday
steps_weekavg
steps_byweekday_end
?plotData
plotData(import_data, cts = "axis1", TS = "TimeStamp")
?plot_steps
plot_steps(import_data)
?plot_weekday_vs_end # REP mvpa_plot
?plot_weekday_vs_end # REP mvpa_plot
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_pai_dayend
plot_steps_dayend
document("./Accelerometer")
# 2) Rebuild package
build("./Accelerometer")
### Test Functions ###
load_all("./Accelerometer")
?plot_weekday_vs_end # REP mvpa_plot
plot_pai_dayend
plot_steps_dayend
import_data <- read.csv("./Outputs/FilteredWakeData_CM.csv")
plotData(import_data, cts = "axis1", TS = "TimeStamp")
library(tidyverse)
library(RSQLite)
library(PhysicalActivity)
load_all("./Accelerometer")
library(devtools)
load_all("./Accelerometer")
plotData(import_data, cts = "axis1", TS = "TimeStamp")
plot_steps(import_data)
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
knitr::opts_chunk$set(echo = TRUE)
pai_week_summary(import_data)
steps_week_summary(import_data)
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_pai_dayend
plot_steps_dayend
plotData(import_data, cts = "axis1", TS = "TimeStamp")
plot_steps(import_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RSQLite)
library(PhysicalActivity)
devtools::load_all("./Accelerometer")
import_data <- read.csv("./Outputs/FilteredWakeData_CM.csv")
?pai_week_summary
pai_week_summary(import_data)
pai_byday
pai_weekavg
pai_byweekday_end
?steps_week_summary
steps_week_summary(import_data)
steps_byday
steps_weekavg
steps_byweekday_end
?plotData
plotData(import_data, cts = "axis1", TS = "TimeStamp")
?plot_steps
plot_steps(import_data)
?plot_weekday_vs_end # REP mvpa_plot
plot_weekday_vs_end(pai_byweekday_end, steps_byweekday_end, "CM")
plot_pai_dayend
plot_steps_dayend
library(tidyverse)
library(RSQLite)
library(PhysicalActivity)
devtools::load_all("./Accelerometer")
library(devtools)
load_all("./Accelerometer")
library(roxygen2)
# 1) Update function documentation
document("./Accelerometer")
# 2) Rebuild package
build("./Accelerometer")
### Test Functions ###
load_all("./Accelerometer")
load_all("./Accelerometer")
load_all("./Accelerometer")
load_all("./Accelerometer")
getwd()
library(tidyverse)
library(RSQLite)
library(PhysicalActivity)
library(devtools)
load_all("./Accelerometer")
# 1) Update function documentation
document("./Accelerometer")
# 1) Update function documentation
document("./Accelerometer")
### To Update R Package ###
getwd()
